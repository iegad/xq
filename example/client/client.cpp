#include "xq/net/udp_session.hpp"
#include "xq/net/udx.hpp"


using UdpSession = xq::net::UdpSession;
using Udx = xq::net::Udx;


static UdpSession::Ptr sess;
//static Udx::Ptr udx;

static int64_t base_time = xq::tools::now_milli();


int rcv_cb(UdpSession::Segment::Ptr &udp_seg) {
	size_t nleft = udp_seg->datalen;
	uint8_t* p = udp_seg->data;

	while (nleft > 0) {
		Udx::Segment::Ptr seg = Udx::Segment::get();
		seg->reset();

		int n = Udx::Segment::decode(seg, p, nleft);
		p += n;
		nleft -= n;

		std::printf("RTT: %lld [COM:%d|CMD:%02x|RID:%d|SN:%lld|TS:%lld|UNA:%lld|WND:%d|LEN:%d|%s]\n",
			xq::tools::now_milli() - base_time - seg->ts, seg->com, seg->cmd, seg->rid, seg->sn, seg->ts, seg->una, seg->wnd, seg->len, std::string((char*)seg->payload, seg->len).c_str());
	}

	return 0;
}


void send_wkr() {
	int64_t now_ms = xq::tools::now_milli() - base_time;


	// seg 1
	Udx::Segment::Ptr seg1 = Udx::Segment::get();
	seg1->com = 1;
	seg1->cmd = xq::net::UDX_CMD_PSH;
	seg1->rid = 1;
	seg1->sn = 4;
	seg1->ts = now_ms;
	seg1->una = 0;
	seg1->wnd = xq::net::UDX_RCV_WND;
	seg1->len = xq::net::UDX_MSS;
	::memcpy(seg1->payloadxq::net::UDX_MSS);
	UdpSession::Segment::Ptr udp_seg = UdpSession::Segment::get();
	udp_seg->reset();
	udp_seg->datalen = Udx::Segment::encode(seg1, udp_seg->data, sizeof(udp_seg->data));
	udp_seg->set_name("192.168.0.101:6688");
	int n = sess->send(udp_seg, true);
	if (n < 0) {
		std::printf("sendto failed: %d\n", xq::net::error());
	}


	// seg 2
	seg1->reset();
	seg1->com = 1;
	seg1->cmd = xq::net::UDX_CMD_PSH;
	seg1->rid = 1;
	seg1->sn = 3;
	seg1->ts = now_ms;
	seg1->una = 0;
	seg1->wnd = xq::net::UDX_RCV_WND;
	seg1->len = xq::net::UDX_MSS;
	::memcpy(seg1->payloadxq::net::UDX_MSS);
	udp_seg->datalen = Udx::Segment::encode(seg1, udp_seg->data, sizeof(udp_seg->data));
	n = sess->send(udp_seg, true);
	if (n < 0) {
		std::printf("sendto failed: %d\n", xq::net::error());
	}

	// seg 3
	seg1->reset();
	seg1->com = 1;
	seg1->cmd = xq::net::UDX_CMD_PSH;
	seg1->rid = 1;
	seg1->sn = 1;
	seg1->ts = now_ms;
	seg1->una = 0;
	seg1->wnd = xq::net::UDX_RCV_WND;
	seg1->len = xq::net::UDX_MSS;
	::memcpy(seg1->payload, "CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC", xq::net::UDX_MSS);
	udp_seg->datalen = Udx::Segment::encode(seg1, udp_seg->data, sizeof(udp_seg->data));
	n = sess->send(udp_seg, true);
	if (n < 0) {
		std::printf("sendto failed: %d\n", xq::net::error());
	}

	// seg 4
	seg1->reset();
	seg1->com = 1;
	seg1->cmd = xq::net::UDX_CMD_PSH;
	seg1->rid = 1;
	seg1->sn = 2;
	seg1->ts = now_ms;
	seg1->una = 0;
	seg1->wnd = xq::net::UDX_RCV_WND;
	seg1->len = xq::net::UDX_MSS;
	::memcpy(seg1->payloadxq::net::UDX_MSS);
	udp_seg->datalen = Udx::Segment::encode(seg1, udp_seg->data, sizeof(udp_seg->data));
	n = sess->send(udp_seg, true);
	if (n < 0) {
		std::printf("sendto failed: %d\n", xq::net::error());
	}

	// seg 5
	seg1->reset();
	seg1->com = 1;
	seg1->cmd = xq::net::UDX_CMD_PSH;
	seg1->rid = 1;
	seg1->sn = 0;
	seg1->ts = now_ms;
	seg1->una = 0;
	seg1->wnd = xq::net::UDX_RCV_WND;
	seg1->len = xq::net::UDX_MSS;
	::memcpy(seg1->payloadxq::net::UDX_MSS);
	udp_seg->datalen = Udx::Segment::encode(seg1, udp_seg->data, sizeof(udp_seg->data));
	n = sess->send(udp_seg, true);
	if (n < 0) {
		std::printf("sendto failed: %d\n", xq::net::error());
	}
}


static int64_t beg = 0;


int main(int argc, char** argv) {
	WSADATA wdata;
	if (WSAStartup(0x0202, &wdata) || wdata.wHighVersion != 0x0202)
		exit(EXIT_FAILURE);

	sess = UdpSession::create();

	std::thread(send_wkr).detach();

	//udx = Udx::create(1, sess);
	sess->start_rcv(rcv_cb);

	WSACleanup();
	exit(EXIT_SUCCESS);
}